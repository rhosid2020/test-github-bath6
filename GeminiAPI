// Initialize Gemini AI
const GEMINI_API_KEY = AIzaSyA0SQ67jJXXwnr8henPOngPxxMgjeKQ5r4; // Replace with your API Key
const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);
const model = genAI.getGenerativeModel({ model: "gemini-pro" });
app.get("/", (req, res) => {
    res.send("Server is running. Use the /validate endpoints.");
});
// Function to call Gemini AI for text analysis
async function analyzeWithGemini(prompt) {
    try {
        const result = await model.generateContent(prompt);
        const response = await result.response;
        return response.text();
    } catch (error) {
        console.error("Error calling Gemini API", error);
        return null;
    }
}
// Validate financial institution
app.post("/validate/institution", async (req, res) => {
    const { institution } = req.body;
    const response = await analyzeWithGemini(`Is '${institution}' a valid financial institution? Reply 'true' or 'false'.`);
    res.json({
        found: !!response,
        institution_name: institution,
        valid: response?.toLowerCase().includes('true')
    });
});
// Validate name in document
app.post("/validate/name", async (req, res) => {
    const { name } = req.body;
    const response = await analyzeWithGemini(`Check if the name '${name}' exists in the document. Reply 'true' or 'false'.`);
    res.json({
        found: !!response,
        valid: response?.toLowerCase().includes('true')
    });
});
// Validate amount in document
app.post("/validate/amount", async (req, res) => {
    const { amount } = req.body;
    const response = await analyzeWithGemini(`Check if the amount '${amount}' exists in the document. Reply 'true' or 'false'.`);
    res.json({
        found: !!response,
        valid: response?.toLowerCase().includes('true')
    });
});
// Validate date within a specific range
app.post("/validate/date", async (req, res) => {
    const { days } = req.body;
    const response = await analyzeWithGemini(`Check if the document contains a date within the last '${days}' days. Reply 'true' or 'false'.`);
    res.json({
        found: !!response,
        valid: response?.toLowerCase().includes('true')
    });
});
// Start the server
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
});
